name: Build and Release

on:
  release:
    types: [prereleased]

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'
          
      - name: Extract version from release tag
        id: extract_version
        run: |
          VERSION=${{ github.event.release.tag_name }}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Update package.json version
        run: |
          npm version ${{ steps.extract_version.outputs.version }} --no-git-tag-version
          
      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.extract_version.outputs.version }}" || exit 0
          git push

  build-windows:
    needs: update-version
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Build Windows distribution
        run: npm run dist:win
        
      - name: Upload Windows artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist-electron/Duksu ${{ needs.update-version.outputs.version }}.exe
          asset_name: Duksu-${{ needs.update-version.outputs.version }}-win-x64.exe
          asset_content_type: application/octet-stream

  build-macos:
    needs: update-version
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Rebuild native dependencies
        run: npx electron-rebuild
        
      - name: Build application
        run: npm run build
        
      - name: Build macOS ARM64 distribution
        run: npm run dist:mac-arm64
        
      - name: Build macOS x64 distribution
        run: npm run dist:mac-x64
        
      - name: Upload macOS ARM64 artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist-electron/Duksu-${{ needs.update-version.outputs.version }}-arm64.dmg
          asset_name: Duksu-${{ needs.update-version.outputs.version }}-mac-arm64.dmg
          asset_content_type: application/octet-stream
          
      - name: Upload macOS x64 artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist-electron/Duksu-${{ needs.update-version.outputs.version }}.dmg
          asset_name: Duksu-${{ needs.update-version.outputs.version }}-mac-x64.dmg
          asset_content_type: application/octet-stream 